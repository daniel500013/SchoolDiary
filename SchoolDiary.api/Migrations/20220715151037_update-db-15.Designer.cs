// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolDiary.api;

#nullable disable

namespace SchoolDiary.api.Migrations
{
    [DbContext(typeof(DiaryDbContext))]
    [Migration("20220715151037_update-db-15")]
    partial class updatedb15
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SchoolDiary.api.Model.Approve", b =>
                {
                    b.Property<int>("ApproveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApproveID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Positive")
                        .HasColumnType("bit");

                    b.HasKey("ApproveID");

                    b.ToTable("Approve");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassID"), 1L, 1);

                    b.Property<int>("ClassNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassID");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Grade", b =>
                {
                    b.Property<int>("GradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradeValue")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("GradeID");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Lesson", b =>
                {
                    b.Property<int>("LessonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonID"), 1L, 1);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonID");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.LessonApprove", b =>
                {
                    b.Property<int>("LessonApproveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonApproveID"), 1L, 1);

                    b.Property<int?>("FK_ApproveID")
                        .HasColumnType("int");

                    b.Property<int>("FK_GradeID")
                        .HasColumnType("int");

                    b.Property<int>("FK_LessonID")
                        .HasColumnType("int");

                    b.HasKey("LessonApproveID");

                    b.HasIndex("FK_ApproveID");

                    b.HasIndex("FK_LessonID");

                    b.ToTable("LessonApprove");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.LessonGrade", b =>
                {
                    b.Property<int>("GradeLessonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeLessonID"), 1L, 1);

                    b.Property<int>("FK_GradeID")
                        .HasColumnType("int");

                    b.Property<int>("FK_LessonID")
                        .HasColumnType("int");

                    b.HasKey("GradeLessonID");

                    b.HasIndex("FK_GradeID");

                    b.HasIndex("FK_LessonID");

                    b.ToTable("LessonGrade");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.LessonMark", b =>
                {
                    b.Property<int>("LessonMarkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonMarkID"), 1L, 1);

                    b.Property<int>("FK_LessonID")
                        .HasColumnType("int");

                    b.Property<int>("FK_MarkID")
                        .HasColumnType("int");

                    b.HasKey("LessonMarkID");

                    b.HasIndex("FK_LessonID");

                    b.HasIndex("FK_MarkID");

                    b.ToTable("LessonMark");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Mark", b =>
                {
                    b.Property<int>("MarkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarkID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Present")
                        .HasColumnType("bit");

                    b.HasKey("MarkID");

                    b.ToTable("Mark");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Parent", b =>
                {
                    b.Property<int>("ParentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentID"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("ParentID");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Person", b =>
                {
                    b.Property<Guid>("UserUUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserUUID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.PersonClass", b =>
                {
                    b.Property<int>("UserClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserClassID"), 1L, 1);

                    b.Property<int>("FK_ClassID")
                        .HasColumnType("int");

                    b.Property<Guid>("FK_UserUUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserClassID");

                    b.HasIndex("FK_ClassID");

                    b.HasIndex("FK_UserUUID");

                    b.ToTable("PersonClass");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.PersonParent", b =>
                {
                    b.Property<int>("PersonParentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonParentID"), 1L, 1);

                    b.Property<int?>("FK_ParentID")
                        .HasColumnType("int");

                    b.Property<Guid>("FK_UserUUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonParentID");

                    b.HasIndex("FK_ParentID");

                    b.HasIndex("FK_UserUUID");

                    b.ToTable("PersonParent");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.PersonRole", b =>
                {
                    b.Property<int>("PersonRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonRoleID"), 1L, 1);

                    b.Property<int>("FK_RoleID")
                        .HasColumnType("int");

                    b.Property<Guid>("FK_UserUUID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonRoleID");

                    b.HasIndex("FK_RoleID");

                    b.HasIndex("FK_UserUUID");

                    b.ToTable("PersonRole");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Name = "Student"
                        },
                        new
                        {
                            RoleID = 2,
                            Name = "Parent"
                        },
                        new
                        {
                            RoleID = 3,
                            Name = "Teacher"
                        },
                        new
                        {
                            RoleID = 4,
                            Name = "Tutor"
                        },
                        new
                        {
                            RoleID = 5,
                            Name = "LocalAdmin"
                        },
                        new
                        {
                            RoleID = 6,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectID"), 1L, 1);

                    b.Property<int>("FK_LessonID")
                        .HasColumnType("int");

                    b.Property<int>("FK_PersonClass")
                        .HasColumnType("int");

                    b.Property<int>("FK_TeacherID")
                        .HasColumnType("int");

                    b.HasKey("SubjectID");

                    b.HasIndex("FK_LessonID");

                    b.HasIndex("FK_PersonClass");

                    b.HasIndex("FK_TeacherID");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Teacher", b =>
                {
                    b.Property<int>("TeacherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherID"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherID");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.LessonApprove", b =>
                {
                    b.HasOne("SchoolDiary.api.Model.Approve", "Approve")
                        .WithMany("LessonApproves")
                        .HasForeignKey("FK_ApproveID");

                    b.HasOne("SchoolDiary.api.Model.Lesson", "Lesson")
                        .WithMany("LessonApproves")
                        .HasForeignKey("FK_LessonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approve");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.LessonGrade", b =>
                {
                    b.HasOne("SchoolDiary.api.Model.Grade", "Grade")
                        .WithMany("LessonGrades")
                        .HasForeignKey("FK_GradeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolDiary.api.Model.Lesson", "Lesson")
                        .WithMany("LessonGrades")
                        .HasForeignKey("FK_LessonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.LessonMark", b =>
                {
                    b.HasOne("SchoolDiary.api.Model.Lesson", "Lesson")
                        .WithMany("LessonMarks")
                        .HasForeignKey("FK_LessonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolDiary.api.Model.Mark", "Mark")
                        .WithMany("LessonMarks")
                        .HasForeignKey("FK_MarkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.PersonClass", b =>
                {
                    b.HasOne("SchoolDiary.api.Model.Class", "Class")
                        .WithMany()
                        .HasForeignKey("FK_ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolDiary.api.Model.Person", "Person")
                        .WithMany("Class")
                        .HasForeignKey("FK_UserUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.PersonParent", b =>
                {
                    b.HasOne("SchoolDiary.api.Model.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("FK_ParentID");

                    b.HasOne("SchoolDiary.api.Model.Person", "Person")
                        .WithMany("Parent")
                        .HasForeignKey("FK_UserUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.PersonRole", b =>
                {
                    b.HasOne("SchoolDiary.api.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("FK_RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolDiary.api.Model.Person", "Person")
                        .WithMany("Roles")
                        .HasForeignKey("FK_UserUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Subject", b =>
                {
                    b.HasOne("SchoolDiary.api.Model.Lesson", "Lesson")
                        .WithMany("Subjects")
                        .HasForeignKey("FK_LessonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolDiary.api.Model.PersonClass", "PersonClass")
                        .WithMany("Subject")
                        .HasForeignKey("FK_PersonClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolDiary.api.Model.Teacher", "Teacher")
                        .WithMany("Subject")
                        .HasForeignKey("FK_TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("PersonClass");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Approve", b =>
                {
                    b.Navigation("LessonApproves");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Grade", b =>
                {
                    b.Navigation("LessonGrades");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Lesson", b =>
                {
                    b.Navigation("LessonApproves");

                    b.Navigation("LessonGrades");

                    b.Navigation("LessonMarks");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Mark", b =>
                {
                    b.Navigation("LessonMarks");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Person", b =>
                {
                    b.Navigation("Class");

                    b.Navigation("Parent");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.PersonClass", b =>
                {
                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolDiary.api.Model.Teacher", b =>
                {
                    b.Navigation("Subject");
                });
#pragma warning restore 612, 618
        }
    }
}
